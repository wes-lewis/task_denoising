__merge__: /src/api/base_method.yaml

name: scprint
label: scPRINT
summary: scPRINT is a large transformer model built for the inference of gene networks
description: |
  scPRINT is a large transformer model built for the inference of gene networks
  (connections between genes explaining the cell's expression profile) from
  scRNAseq data.

  It uses novel encoding and decoding of the cell expression profile and new
  pre-training methodologies to learn a cell model.

  scPRINT can be used to perform the following analyses:

  - expression denoising: increase the resolution of your scRNAseq data
  - cell embedding: generate a low-dimensional representation of your dataset
  - label prediction: predict the cell type, disease, sequencer, sex, and
    ethnicity of your cells
  - gene network inference: generate a gene network from any cell or cell
    cluster in your scRNAseq dataset

references:
  doi:
    - 10.1101/2024.07.29.605556

links:
  documentation: https://cantinilab.github.io/scPRINT/
  repository: https://github.com/cantinilab/scPRINT

info:
  preferred_normalization: counts
  variants:
    scprint_large:
      model_name: "large"
    scprint_medium:
      model_name: "medium"
    scprint_small:
      model_name: "small"

arguments:
  - name: "--model_name"
    type: "string"
    description: Which model to use. Not used if --model is provided.
    choices: ["large", "medium", "small"]
    default: "large"
  - name: --model
    type: file
    description: Path to the scPRINT model.
    required: false

resources:
  - type: python_script
    path: script.py

engines:
  - type: docker
    image: openproblems/base_pytorch_nvidia:1.0.0
    setup:
      - type: python
        pip:
          - huggingface_hub
          - scprint
      - type: docker
        run: lamin init --storage ./main --name main --schema bionty
      - type: python
        script: import bionty as bt; bt.core.sync_all_sources_to_latest()
      - type: docker
        run: lamin load anonymous/main
      - type: python
        script: from scdataloader.utils import populate_my_ontology; populate_my_ontology()

runners:
  - type: executable
  - type: nextflow
    directives:
      label: [midtime, midmem, midcpu, gpu]
